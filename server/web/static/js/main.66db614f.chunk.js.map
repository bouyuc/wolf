{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","client","ApolloClient","uri","useStyles","makeStyles","theme","margin","spacing","table","minWidth","title","flexGrow","menuButton","marginRight","GET_PLAYERS","gql","GET_ROLES","GET_PLAYER_INFO","UPDATE_ROLE_NUMBER","UPDATE_PLAYER_PASS","UPDATE_PLAYER_NAME","GENERATE_ROLE","GENERATE_PLAYER","REMOVE_ALL_PLAYER","SimpleTable","props","classes","TableContainer","component","Paper","Table","className","aria-label","size","TableHead","TableRow","TableCell","align","TableBody","data","map","row","key","name","scope","number","PlayerTable","id","roleName","RoleTable","useQuery","pollInterval","loading","error","roles","filter","d","God","useMutation","updateRoleNumber","generateRole","generatePlayer","removeAllPlayer","React","useState","roleId","setRoleId","roleNumber","setRoleNumber","players","length","style","width","marginLeft","Button","variant","color","onClick","console","log","display","Autocomplete","options","getOptionLabel","option","onChange","event","newValue","renderInput","params","TextField","label","type","value","e","target","Fab","variables","parseInt","Player","fetchPolicy","pass","useDebounce","setValue","setName","updatePlayerName","called","useEffect","player","Card","root","CardContent","Typography","Login","playerId","setPlayerId","playerPass","setPlayerPass","updatePlayerPass","playerStatus","isValidPlayerStatus","setIsValidPlayerStatus","isValid","AppBar","position","Toolbar","IconButton","edge","marginTop","justifyContent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.66db614f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport Select from \"react-select\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Divider from \"@material-ui/core/Divider\";\nimport {\n  fade,\n  withStyles,\n  makeStyles,\n  createMuiTheme,\n} from \"@material-ui/core/styles\";\nimport { useDebounce, useDebounceCallback } from \"@react-hook/debounce\";\nimport ApolloClient from \"apollo-boost\";\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n});\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n  table: {\n    minWidth: 450,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nconst GET_PLAYERS = gql`\n  {\n    players {\n      id\n      name\n    }\n  }\n`;\n\nconst GET_ROLES = gql`\n  {\n    roles {\n      id\n      name\n      number\n    }\n    players {\n      id\n      name\n      roleName\n    }\n  }\n`;\n\nconst GET_PLAYER = gql`\n  query GetPlayer($id: Int!, $pass: String!) {\n    player(id: $id, pass: $pass) {\n      id\n      name\n    }\n  }\n`;\n\nconst GET_PLAYER_INFO = gql`\n  query GetPlayer($id: Int!, $pass: String!) {\n    player(id: $id, pass: $pass) {\n      id\n      name\n      roleName\n    }\n    players {\n      id\n      name\n    }\n  }\n`;\n\nconst UPDATE_ROLE_NUMBER = gql`\n  mutation UpdateRoleNumber($id: Int!, $number: Int!) {\n    updateRoleNumber(id: $id, number: $number)\n  }\n`;\n\nconst UPDATE_PLAYER_PASS = gql`\n  mutation UpdatePlayerPass($id: Int!, $pass: String!) {\n    updatePlayerPass(id: $id, pass: $pass) {\n      isValid\n      name\n    }\n  }\n`;\n\nconst UPDATE_PLAYER_NAME = gql`\n  mutation UpdatePlayerName($id: Int!, $name: String!) {\n    updatePlayerName(id: $id, name: $name)\n  }\n`;\n\nconst GENERATE_ROLE = gql`\n  mutation GenerateRole {\n    generateRole\n  }\n`;\n\nconst GENERATE_PLAYER = gql`\n  mutation GeneratePlayer {\n    generatePlayer\n  }\n`;\n\nconst REMOVE_ALL_PLAYER = gql`\n  mutation RemoveAllPlayer {\n    removeAllPlayer\n  }\n`;\n\nfunction SimpleTable(props) {\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\" size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>角色</TableCell>\n\n            <TableCell align=\"right\">人數</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {props.data.map((row) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell align=\"right\">{row.number}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction PlayerTable(props) {\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\" size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>ID</TableCell>\n\n            <TableCell align=\"right\">玩家</TableCell>\n            <TableCell align=\"right\">角色</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {props.data.map((row) => (\n            <TableRow key={row.id}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.id}\n              </TableCell>\n              <TableCell align=\"right\">{row.name}</TableCell>\n              <TableCell align=\"right\">{row.roleName}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction RoleTable() {\n  const { loading, error, data } = useQuery(GET_ROLES, {\n    pollInterval: 500,\n  });\n\n  if (loading) {\n    return null;\n  }\n\n  return (\n    <div>\n      <SimpleTable data={data.roles.filter((d) => d.id > 0)} />\n    </div>\n  );\n}\n\nfunction God() {\n  const classes = useStyles();\n  const { loading, error, data } = useQuery(GET_ROLES, {\n    pollInterval: 500,\n  });\n  const [updateRoleNumber] = useMutation(UPDATE_ROLE_NUMBER);\n  const [generateRole] = useMutation(GENERATE_ROLE);\n  const [generatePlayer] = useMutation(GENERATE_PLAYER);\n  const [removeAllPlayer] = useMutation(REMOVE_ALL_PLAYER);\n  const [roleId, setRoleId] = React.useState(-1);\n  const [roleNumber, setRoleNumber] = React.useState(0);\n  if (loading) {\n    return <div>Loading</div>;\n  }\n\n  const handleRoleChange = (event, newValue) => {\n    console.log(newValue);\n    setRoleId(newValue.id);\n  };\n\n  if (data.players.length > 1) {\n    return (\n      <div style={{ width: 450, marginLeft: \"30%\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            generateRole();\n          }}\n        >\n          產生角色\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            removeAllPlayer();\n          }}\n        >\n          刪除玩家\n        </Button>\n        <PlayerTable data={data.players} />\n      </div>\n    );\n  }\n\n  console.log(data);\n  return (\n    <div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => {\n          generatePlayer();\n        }}\n      >\n        加入玩家\n      </Button>\n      <div style={{ display: \"flex\", marginLeft: \"30%\" }}>\n        <Autocomplete\n          id=\"combo-box-demo\"\n          options={data.roles.filter((d) => d.id > 0)}\n          getOptionLabel={(option) => option.name}\n          style={{ width: 300 }}\n          onChange={handleRoleChange}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"角色\"\n              variant=\"outlined\"\n              margin=\"dense\"\n            />\n          )}\n        />\n\n        <TextField\n          id=\"standard-basic\"\n          label=\"人數\"\n          variant=\"outlined\"\n          className={classes.margin}\n          margin=\"dense\"\n          type=\"number\"\n          value={roleNumber}\n          onChange={(e) => setRoleNumber(e.target.value)}\n        />\n\n        <Fab\n          size=\"medium\"\n          color=\"secondary\"\n          aria-label=\"add\"\n          onClick={() => {\n            console.log(roleId, roleNumber);\n            updateRoleNumber({\n              variables: { id: roleId, number: parseInt(roleNumber) },\n            });\n          }}\n        >\n          <AddIcon />\n        </Fab>\n      </div>\n      <div style={{ width: 450, marginLeft: \"30%\" }}>\n        <RoleTable />\n      </div>\n    </div>\n  );\n}\n\nfunction Player(props) {\n  const classes = useStyles();\n\n  const { loading, error, data } = useQuery(GET_PLAYER_INFO, {\n    fetchPolicy: \"network-only\",\n    variables: { id: props.id, pass: props.pass },\n    pollInterval: 500,\n  });\n\n  console.log(props);\n\n  const [value, setValue] = useDebounce(props.name, 500);\n  const [name, setName] = React.useState(props.name);\n  const [updatePlayerName, { called }] = useMutation(UPDATE_PLAYER_NAME);\n\n  React.useEffect(() => {\n    if (value && (value !== props.name || called)) {\n      updatePlayerName({\n        variables: { id: props.id, name: value },\n      });\n    }\n  }, [value]);\n\n  if (loading) {\n    return <div>Loading</div>;\n  }\n\n  console.log(data.player);\n  const { id, name: playerName, roleName } = data.player;\n  return (\n    <div style={{ width: 450, marginLeft: \"30%\" }}>\n      <TextField\n        id=\"standard-basic\"\n        label=\"姓名\"\n        variant=\"outlined\"\n        className={classes.margin}\n        margin=\"dense\"\n        value={name}\n        onChange={(e) => {\n          setValue(e.target.value);\n          setName(e.target.value);\n        }}\n      />\n      <Card className={classes.root}>\n        <CardContent>\n          <Typography variant=\"h1\" component=\"h1\">\n            {roleName}\n          </Typography>\n        </CardContent>\n      </Card>\n      <PlayerTable data={data.players} />\n    </div>\n  );\n}\n\nfunction Login() {\n  const classes = useStyles();\n\n  const [playerId, setPlayerId] = React.useState(-1);\n  const [playerPass, setPlayerPass] = React.useState(0);\n  const { loading, error, data } = useQuery(GET_PLAYERS);\n  const [updatePlayerPass, playerStatus] = useMutation(UPDATE_PLAYER_PASS);\n  const [isValidPlayerStatus, setIsValidPlayerStatus] = React.useState(false);\n  if (loading || playerStatus.loading) {\n    return <div>Loading</div>;\n  }\n\n  //if (playerStatus.data)\n\n  if (\n    playerStatus.called &&\n    playerStatus.data.updatePlayerPass.isValid &&\n    isValidPlayerStatus\n  ) {\n    console.log(playerStatus);\n\n    return (\n      <div>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"menu\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              小狼狼\n            </Typography>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => {\n                setIsValidPlayerStatus(false);\n              }}\n            >\n              退出\n            </Button>\n          </Toolbar>\n        </AppBar>\n        \n        <div style={{marginTop:10}}>\n          {playerId === 0 ? (\n            <God />\n          ) : (\n            <Player\n              id={playerId}\n              pass={playerPass}\n              name={playerStatus.data.updatePlayerPass.name}\n            />\n          )}\n        </div>\n      </div>\n    );\n\n    /*\n    return (\n      <div>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            setIsValidPlayerStatus(false);\n          }}\n        >\n          退出\n        </Button>\n        <Player\n          id={playerId}\n          pass={playerPass}\n          name={playerStatus.data.updatePlayerPass.name}\n        />\n      </div>\n    );\n    */\n  }\n\n  return (\n    <div style={{ marginTop: \"20%\" }}>\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <Autocomplete\n          id=\"combo-box-demo\"\n          className={classes.margin}\n          options={data.players}\n          getOptionLabel={(option) => `player ${option.id}`}\n          onChange={(event, newValue) => {\n            setPlayerId(newValue.id);\n          }}\n          style={{ width: 200, marginLeft: 55 }}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"玩家\"\n              variant=\"outlined\"\n              margin=\"dense\"\n            />\n          )}\n        />\n        <div style={{ marginTop: 10 }}>\n          <Fab\n            size=\"medium\"\n            color=\"secondary\"\n            aria-label=\"add\"\n            onClick={() => {\n              updatePlayerPass({\n                variables: { id: playerId, pass: playerPass },\n              });\n              setIsValidPlayerStatus(true);\n            }}\n          >\n            <AddIcon />\n          </Fab>\n        </div>\n      </div>\n      <TextField\n        id=\"standard-basic\"\n        label=\"密碼\"\n        variant=\"outlined\"\n        className={classes.margin}\n        margin=\"dense\"\n        onChange={(e) => setPlayerPass(e.target.value)}\n        value={playerPass}\n      />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n        {/*<God />*/}\n        <Login />\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}