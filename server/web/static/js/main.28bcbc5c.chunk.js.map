{"version":3,"sources":["logo.svg","Footer.js","PlayerTable.js","RoleTable.js","God.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","makeStyles","theme","footer","backgroundColor","palette","background","paper","padding","spacing","useStyles","margin","table","minWidth","title","flexGrow","menuButton","marginRight","PlayerTable","props","classes","TableContainer","component","Paper","Table","className","aria-label","size","TableHead","TableRow","TableCell","align","TableBody","data","map","row","key","id","scope","name","roleName","style","color","isEmpty","transition","fontSize","GET_ROLES","gql","SimpleTable","number","RoleTable","useQuery","pollInterval","loading","error","roles","filter","d","UPDATE_ROLE_NUMBER","GENERATE_ROLE","GENERATE_PLAYER","REMOVE_ALL_PLAYER","God","useMutation","generateRole","removeAllPlayer","React","useState","players","length","marginTop","Button","variant","onClick","client","ApolloClient","uri","GET_PLAYERS","GET_PLAYER_INFO","UPDATE_PLAYER_PASS","UPDATE_PLAYER_NAME","Copyright","Typography","Date","getFullYear","Player","fetchPolicy","variables","pass","console","log","useDebounce","value","setValue","setName","updatePlayerName","called","useEffect","player","TextField","label","onChange","e","target","Card","root","CardContent","Login","playerId","setPlayerId","playerPass","setPlayerPass","updatePlayerPass","playerStatus","isValidPlayerStatus","setIsValidPlayerStatus","isValid","Fragment","CssBaseline","Container","AppBar","position","Toolbar","IconButton","edge","Box","pt","display","justifyContent","Autocomplete","options","getOptionLabel","option","renderOption","event","newValue","width","marginLeft","renderInput","params","Fab","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.28bcbc5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    // marginTop: theme.spacing(8),\n    padding: theme.spacing(6, 0),\n  },\n}));\n\nexport default function Footer(props) {\n  const classes = useStyles();\n  const { description, title } = props;\n\n  return (\n    <footer className={classes.footer}>\n      <Container maxWidth=\"lg\">\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          {title}\n        </Typography>\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n          {description}\n        </Typography>\n        <Copyright />\n      </Container>\n    </footer>\n  );\n}\n\nFooter.propTypes = {\n  description: PropTypes.string,\n  title: PropTypes.string,\n};","import React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {\n    fade,\n    withStyles,\n    makeStyles,\n    createMuiTheme,\n  } from \"@material-ui/core/styles\";\n\n\n\n  const useStyles = makeStyles((theme) => ({\n    margin: {\n      margin: theme.spacing(1),\n    },\n    table: {\n      minWidth: 450,\n    },\n    title: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n  }));\n\n\nexport default function PlayerTable(props) {\n    const classes = useStyles();\n  \n    return (\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\" size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell>ID</TableCell>\n  \n              <TableCell align=\"right\">ç©å®¶</TableCell>\n              <TableCell align=\"right\">è§è²</TableCell>\n              <TableCell align=\"right\">ä¸ç·</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {props.data.map((row) => (\n              <TableRow key={row.id}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.id}\n                </TableCell>\n                <TableCell align=\"right\">{row.name}</TableCell>\n                <TableCell align=\"right\">{row.roleName}</TableCell>\n                <TableCell align=\"right\">\n                  <span\n                    style={{\n                      color: row.isEmpty?\"gray\" :\"lightgreen\",\n                      transition: \"all .3s ease\",\n                      fontSize: \"24px\",\n                      marginRight: \"10px\",\n                    }}\n                  >\n                    &#x25cf;\n                  </span>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }","\nimport React from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {\n    fade,\n    withStyles,\n    makeStyles,\n    createMuiTheme,\n  } from \"@material-ui/core/styles\";\nconst GET_ROLES = gql`\n  {\n    roles {\n      id\n      name\n      number\n    }\n    players {\n      id\n      name\n      roleName\n      isEmpty\n    }\n  }\n`;\n\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n      margin: theme.spacing(1),\n    },\n    table: {\n      minWidth: 450,\n    },\n    title: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n  }));\n\n\nfunction SimpleTable(props) {\n    const classes = useStyles();\n  \n    return (\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\" size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell>è§è²</TableCell>\n  \n              <TableCell align=\"right\">äººæ¸</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {props.data.map((row) => (\n              <TableRow key={row.name}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.name}\n                </TableCell>\n                <TableCell align=\"right\">{row.number}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n\n\nexport default function RoleTable() {\n    const { loading, error, data } = useQuery(GET_ROLES, {\n      pollInterval: 500,\n    });\n  \n    if (loading) {\n      return null;\n    }\n  \n    return (\n      <div>\n        <SimpleTable data={data.roles.filter((d) => d.id > 0)} />\n      </div>\n    );\n  }","import React from \"react\";\nimport {\n  fade,\n  withStyles,\n  makeStyles,\n  createMuiTheme,\n} from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PlayerTable from \"./PlayerTable\";\nimport RoleTable from \"./RoleTable\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nconst GET_PLAYERS = gql`\n  {\n    players {\n      id\n      name\n      isEmpty\n    }\n  }\n`;\n\nconst GET_ROLES = gql`\n  {\n    roles {\n      id\n      name\n      number\n    }\n    players {\n      id\n      name\n      roleName\n      isEmpty\n    }\n  }\n`;\n\nconst GET_PLAYER = gql`\n  query GetPlayer($id: Int!, $pass: String!) {\n    player(id: $id, pass: $pass) {\n      id\n      name\n    }\n  }\n`;\n\nconst GET_PLAYER_INFO = gql`\n  query GetPlayer($id: Int!, $pass: String!) {\n    player(id: $id, pass: $pass) {\n      id\n      name\n      roleName\n    }\n    players {\n      id\n      name\n    }\n  }\n`;\n\nconst UPDATE_ROLE_NUMBER = gql`\n  mutation UpdateRoleNumber($id: Int!, $number: Int!) {\n    updateRoleNumber(id: $id, number: $number)\n  }\n`;\n\nconst UPDATE_PLAYER_PASS = gql`\n  mutation UpdatePlayerPass($id: Int!, $pass: String!) {\n    updatePlayerPass(id: $id, pass: $pass) {\n      isValid\n      name\n    }\n  }\n`;\n\nconst UPDATE_PLAYER_NAME = gql`\n  mutation UpdatePlayerName($id: Int!, $name: String!) {\n    updatePlayerName(id: $id, name: $name)\n  }\n`;\n\nconst GENERATE_ROLE = gql`\n  mutation GenerateRole {\n    generateRole\n  }\n`;\n\nconst GENERATE_PLAYER = gql`\n  mutation GeneratePlayer {\n    generatePlayer\n  }\n`;\n\nconst REMOVE_ALL_PLAYER = gql`\n  mutation RemoveAllPlayer {\n    removeAllPlayer\n  }\n`;\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n  table: {\n    minWidth: 450,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default function God() {\n  const classes = useStyles();\n  const { loading, error, data } = useQuery(GET_ROLES, {\n    pollInterval: 500,\n  });\n  const [updateRoleNumber] = useMutation(UPDATE_ROLE_NUMBER);\n  const [generateRole] = useMutation(GENERATE_ROLE);\n  const [generatePlayer] = useMutation(GENERATE_PLAYER);\n  const [removeAllPlayer] = useMutation(REMOVE_ALL_PLAYER);\n  const [roleId, setRoleId] = React.useState(-1);\n  const [roleNumber, setRoleNumber] = React.useState(0);\n  if (loading) {\n    return <div>Loading</div>;\n  }\n\n  const handleRoleChange = (event, newValue) => {\n    \n    setRoleId(newValue.id);\n  };\n\n  if (data.players.length > 1) {\n    return (\n      <div style={{ marginTop:120 }}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            generateRole();\n          }}\n        >\n          ç¢çè§è²\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            removeAllPlayer();\n          }}\n        >\n          åªé¤ç©å®¶\n        </Button>\n        <PlayerTable data={data.players} />\n      </div>\n    );\n  }\n\n  \n  return (\n    <div>\n      {/*<Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => {\n          generatePlayer();\n        }}\n      >\n        å å¥ç©å®¶\n      </Button>\n      <div style={{ display: \"flex\" }}>\n        <Autocomplete\n          id=\"combo-box-demo\"\n          options={data.roles.filter((d) => d.id > 0)}\n          getOptionLabel={(option) => option.name}\n          style={{ width: 300 }}\n          onChange={handleRoleChange}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"è§è²\"\n              variant=\"outlined\"\n              margin=\"dense\"\n            />\n          )}\n        />\n\n        <TextField\n          id=\"standard-basic\"\n          label=\"äººæ¸\"\n          variant=\"outlined\"\n          className={classes.margin}\n          margin=\"dense\"\n          type=\"number\"\n          value={roleNumber}\n          onChange={(e) => setRoleNumber(e.target.value)}\n        />\n\n        <Fab\n          size=\"medium\"\n          color=\"secondary\"\n          aria-label=\"add\"\n          onClick={() => {\n            console.log(roleId, roleNumber);\n            updateRoleNumber({\n              variables: { id: roleId, number: parseInt(roleNumber) },\n            });\n          }}\n        >\n          <AddIcon />\n        </Fab>\n        </div>*/}\n      \n        <RoleTable />\n      \n    </div>\n  );\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport Select from \"react-select\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Footer from \"./Footer\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport {\n  fade,\n  withStyles,\n  makeStyles,\n  createMuiTheme,\n} from \"@material-ui/core/styles\";\nimport { useDebounce, useDebounceCallback } from \"@react-hook/debounce\";\nimport ApolloClient from \"apollo-boost\";\n\nimport God from \"./God\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n});\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n  table: {\n    minWidth: 450,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nconst GET_PLAYERS = gql`\n  {\n    players {\n      id\n      name\n      isEmpty\n    }\n  }\n`;\n\nconst GET_ROLES = gql`\n  {\n    roles {\n      id\n      name\n      number\n    }\n    players {\n      id\n      name\n      roleName\n      isEmpty\n    }\n  }\n`;\n\nconst GET_PLAYER = gql`\n  query GetPlayer($id: Int!, $pass: String!) {\n    player(id: $id, pass: $pass) {\n      id\n      name\n    }\n  }\n`;\n\nconst GET_PLAYER_INFO = gql`\n  query GetPlayer($id: Int!, $pass: String!) {\n    player(id: $id, pass: $pass) {\n      id\n      name\n      roleName\n    }\n    players {\n      id\n      name\n    }\n  }\n`;\n\nconst UPDATE_ROLE_NUMBER = gql`\n  mutation UpdateRoleNumber($id: Int!, $number: Int!) {\n    updateRoleNumber(id: $id, number: $number)\n  }\n`;\n\nconst UPDATE_PLAYER_PASS = gql`\n  mutation UpdatePlayerPass($id: Int!, $pass: String!) {\n    updatePlayerPass(id: $id, pass: $pass) {\n      isValid\n      name\n    }\n  }\n`;\n\nconst UPDATE_PLAYER_NAME = gql`\n  mutation UpdatePlayerName($id: Int!, $name: String!) {\n    updatePlayerName(id: $id, name: $name)\n  }\n`;\n\nconst GENERATE_ROLE = gql`\n  mutation GenerateRole {\n    generateRole\n  }\n`;\n\nconst GENERATE_PLAYER = gql`\n  mutation GeneratePlayer {\n    generatePlayer\n  }\n`;\n\nconst REMOVE_ALL_PLAYER = gql`\n  mutation RemoveAllPlayer {\n    removeAllPlayer\n  }\n`;\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nfunction SimpleTable(props) {\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\" size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>è§è²</TableCell>\n\n            <TableCell align=\"right\">äººæ¸</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {props.data.map((row) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell align=\"right\">{row.number}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction PlayerTable(props) {\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\" size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>ID</TableCell>\n\n            <TableCell align=\"right\">ç©å®¶</TableCell>\n            <TableCell align=\"right\">è§è²</TableCell>\n            <TableCell align=\"right\">ä¸ç·</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {props.data.map((row) => (\n            <TableRow key={row.id}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.id}\n              </TableCell>\n              <TableCell align=\"right\">{row.name}</TableCell>\n              <TableCell align=\"right\">{row.roleName}</TableCell>\n              <TableCell align=\"right\">\n                <span\n                  style={{\n                    color: row.isEmpty ? \"gray\" : \"lightgreen\",\n                    transition: \"all .3s ease\",\n                    fontSize: \"24px\",\n                    marginRight: \"10px\",\n                  }}\n                >\n                  &#x25cf;\n                </span>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction Player(props) {\n  const classes = useStyles();\n\n  const { loading, error, data } = useQuery(GET_PLAYER_INFO, {\n    fetchPolicy: \"network-only\",\n    variables: { id: props.id, pass: props.pass },\n    pollInterval: 500,\n  });\n\n  console.log(props);\n\n  const [value, setValue] = useDebounce(props.name, 500);\n  const [name, setName] = React.useState(props.name);\n  const [updatePlayerName, { called }] = useMutation(UPDATE_PLAYER_NAME);\n\n  React.useEffect(() => {\n    if (value && (value !== props.name || called)) {\n      updatePlayerName({\n        variables: { id: props.id, name: value },\n      });\n    }\n  }, [value]);\n\n  if (loading) {\n    return <div>Loading</div>;\n  }\n\n  console.log(data.player);\n  const { id, name: playerName, roleName } = data.player;\n  return (\n    <div style={{ marginTop:120 }}>\n      <TextField\n        id=\"standard-basic\"\n        label=\"å§å\"\n        variant=\"outlined\"\n        className={classes.margin}\n        margin=\"dense\"\n        value={name}\n        onChange={(e) => {\n          setValue(e.target.value);\n          setName(e.target.value);\n        }}\n      />\n      <Card className={classes.root}>\n        <CardContent>\n          <Typography variant=\"h1\" component=\"h1\">\n            {roleName}\n          </Typography>\n        </CardContent>\n      </Card>\n      <PlayerTable data={data.players} />\n    </div>\n  );\n}\n\nfunction Login() {\n  const classes = useStyles();\n\n  const [playerId, setPlayerId] = React.useState(-1);\n  const [playerPass, setPlayerPass] = React.useState(0);\n  const { loading, error, data } = useQuery(GET_PLAYERS);\n  const [updatePlayerPass, playerStatus] = useMutation(UPDATE_PLAYER_PASS);\n  const [isValidPlayerStatus, setIsValidPlayerStatus] = React.useState(false);\n  if (loading || playerStatus.loading) {\n    return <div>Loading</div>;\n  }\n\n  //if (playerStatus.data)\n\n  if (\n    playerStatus.called &&\n    playerStatus.data.updatePlayerPass.isValid &&\n    isValidPlayerStatus\n  ) {\n    console.log(playerStatus);\n\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <Container>\n          <AppBar position=\"absolute\">\n            <Toolbar>\n              <IconButton\n                edge=\"start\"\n                className={classes.menuButton}\n                color=\"inherit\"\n                aria-label=\"menu\"\n              >\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h6\" className={classes.title}>\n                å°ç¼ç¼\n              </Typography>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => {\n                  setIsValidPlayerStatus(false);\n                }}\n              >\n                éåº\n              </Button>\n            </Toolbar>\n          </AppBar>\n\n          {<div style={{ marginTop: 10 }}>\n            {playerId === 0 ? (\n              <God />\n            ) : (\n              <Player\n                id={playerId}\n                pass={playerPass}\n                name={playerStatus.data.updatePlayerPass.name}\n              />\n            )}\n            </div>}\n          <Box pt={4}>\n            <Copyright />\n          </Box>\n        </Container>\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <div style={{ marginTop: \"20%\" }}>\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <Autocomplete\n          id=\"combo-box-demo\"\n          className={classes.margin}\n          options={data.players}\n          getOptionLabel={(option) => `ç©å®¶ ${option.id}`}\n          renderOption={(option) => (\n            <React.Fragment>\n              <span\n                style={{\n                  color: option.isEmpty ? \"gray\" : \"lightgreen\",\n                  transition: \"all .3s ease\",\n                  fontSize: \"24px\",\n                  marginRight: \"10px\",\n                }}\n              >\n                &#x25cf;\n              </span>\n              {` ç©å®¶ ${option.id}`}\n            </React.Fragment>\n          )}\n          onChange={(event, newValue) => {\n            setPlayerId(newValue.id);\n          }}\n          style={{ width: 200, marginLeft: 55 }}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"ç©å®¶\"\n              variant=\"outlined\"\n              margin=\"dense\"\n            />\n          )}\n        />\n        <div style={{ marginTop: 10 }}>\n          <Fab\n            size=\"medium\"\n            color=\"secondary\"\n            aria-label=\"add\"\n            onClick={() => {\n              updatePlayerPass({\n                variables: { id: playerId, pass: playerPass },\n              });\n              setIsValidPlayerStatus(true);\n            }}\n          >\n            <AddIcon />\n          </Fab>\n        </div>\n      </div>\n      <TextField\n        id=\"standard-basic\"\n        label=\"å¯ç¢¼\"\n        variant=\"outlined\"\n        className={classes.margin}\n        margin=\"dense\"\n        onChange={(e) => setPlayerPass(e.target.value)}\n        value={playerPass}\n      />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n        {/*<God />*/}\n        <Login />\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}